public class BinaryTree<T> {
  private Node<T> root;
  /*
  public BinaryTree(Node<T> root) {
    setRoot(root);
  }

  public void setRoot(Node<T> root) {
    this.root = root;
  }
  */

  public Node<T> getRoot() {
    return root;
  }

  public void insert(Node<T> z) {
    Node<T> y = null;
    Node<T> x = root;
    while (x!=null) {
      y = x;
      //if (z.getKey() < x.getKey()) {
      if (z.hasKeyLessThan(x)) {
        x = x.getLeft();
      } else {
        x = x.getRight();
      }
    }

    z.setParent(y);

    if (y==null) {
      //setRoot(z);
      root = z;
    } else {
      if (z.getKey() < y.getKey()) {
        y.setLeft(z);
      } else {
        y.setRight(z);
      }
    }
  }

  public static void main(String[] args) {
    //BinaryTree<Long> tree=new BinaryTree<Long>(new Node<Long>(10L));
    //tree.printer();
    BinaryTree<Long> tree=new BinaryTree<Long>();
    tree.insert(new Node<Long>(10L));
  }
}

class Node<T> {
  private T key;
  private Node<T> parent;
  private Node<T> right;
  private Node<T> left;

  public Node(T key) {
    this.key = key;
    parent=null;
    right=null;
    left=null;
  }

  public void setKey(T key) {
    this.key = key;
  }

  public void setParent(Node<T> parent) {
    this.parent = parent;
  }
 
  public void setRight(Node<T> right) {
    this.right = right;
  }

  public void setLeft(Node<T> left) {
    this.left = left;
  }
 
  public T getKey() {
    return key;
  }

  public Node<T> getParent() {
    return parent;
  }

  public Node<T> getRight() {
    return right;
  }

  public Node<T> getLeft() {
    return left;
  }

}
